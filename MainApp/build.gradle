import org.apache.tools.ant.taskdefs.condition.Os
apply plugin: 'com.android.application'

android {
    compileSdkVersion 32
    defaultConfig {
        applicationId "com.paranoiaworks.unicus.android.sse"
        minSdkVersion 14
        targetSdkVersion 31
        versionCode 118
        versionName "3.1.0.2"
        buildToolsVersion "33.0.0"
        ndkVersion "25.1.8937393"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }

    sourceSets.main {
        //jni.srcDirs = [] //disable automatic ndk-build call
        jniLibs.srcDir 'libs'
    }

    task ndkBuild(type: Exec) {
            workingDir file('jni-pwncenc')
            commandLine getNdkBuildCmd(), 'V=1', 'NDK_PROJECT_PATH=.', 'NDK_APPLICATION_MK=Application.mk', 'NDK_LIBS_OUT=../libs/', 'NDK_APP_LDFLAGS="-Wl,--build-id=none"', 'NDK_DEBUG=0'
   
        doLast {
            copy {
                from "TempLibs"
                into "./libs/"
            }
        }
    }

    task cleanNative(type: Exec) {
        workingDir file('jni-pwncenc')
        commandLine getNdkBuildCmd(), 'NDK_PROJECT_PATH=.', 'NDK_APPLICATION_MK=Application.mk', 'clean'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }	

    preBuild.dependsOn ndkBuild
    clean.dependsOn cleanNative
}

def buildFlavor = System.env.BUILD_FLAVOR
if (buildFlavor != "FDROID") {
    apply plugin: "com.github.willir.rust.cargo-ndk-android"

    cargoNdk {
        module = "CryptoLibs/jni-Blake3mt/blake3jni"
        targets = ["arm64", "arm", "x86_64"]
        buildType = "release"
        apiLevel = 19
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.documentfile:documentfile:1.0.1"
    implementation project(':CompressLibs')
    implementation project(':CryptoLibs')
    implementation project(':F5Steg')
}

def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null) return System.env.ANDROID_NDK_ROOT
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null) throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")
    return ndkdir
}

def getNdkBuildCmd() {
    def ndkbuild = getNdkDir() + "/ndk-build"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) ndkbuild += ".cmd"
    return ndkbuild
}

